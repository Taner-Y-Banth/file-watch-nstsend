{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","imageSrc","setImageSrc","processedImageSrc","setProcessedImageSrc","visionText","setVisionText","processedVisionText","setProcessedVisionText","tesseractText","setTesseractText","processedTesseractText","setProcessedTesseractText","useEffect","wsUrlParam","URLSearchParams","window","location","search","get","wsUrl","origin","replace","nstClient","NstrumentaClient","apiKey","projectId","addListener","console","log","subscribe","message","blob","Blob","type","src","URL","createObjectURL","grayscale","src1","init","className","colSpan","id","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA6FeA,MAzFf,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEqCF,qBAFrC,mBAENG,EAFM,KAEaC,EAFb,OAGuBJ,qBAHvB,mBAGNK,EAHM,KAGMC,EAHN,OAIyCN,qBAJzC,mBAINO,EAJM,KAIeC,EAJf,OAK6BR,qBAL7B,mBAKNS,EALM,KAKSC,EALT,OAM+CV,qBAN/C,mBAMNW,EANM,KAMkBC,EANlB,KA6DX,OArDFC,qBAAU,WAER,IAAMC,EAAa,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,SAE7DC,EAAQN,GAA0BE,OAAOC,SAASI,OAAOC,QAAQ,OAAQ,MAEzEC,EAAY,IAAIC,mBAAiB,CACrCC,OAAQ,GACRC,UAAW,GACXN,UAGFG,EAAUI,YAAY,QAAQ,WAC5BC,QAAQC,IAAI,mBACZN,EAAUO,UAAU,iBAAiB,SAACC,GACpC7B,EAAY,IACZE,EAAqB,IACrB,IAAM4B,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAEG,KAAM,cACnCC,EAAMC,IAAIC,gBAAgBL,GAChCJ,QAAQC,IAAIM,GACZjC,EAAYiC,GACZ3B,EAAuB,IACvBF,EAAc,IACdM,EAA0B,IAC1BF,EAAiB,OAEnBa,EAAUO,UAAU,kBAAkB,SAACQ,GACrC,IAAMN,EAAO,IAAIC,KAAK,CAACK,GAAY,CAAEJ,KAAM,cACrCK,EAAOH,IAAIC,gBAAgBL,GACjCJ,QAAQC,IAAIU,GACZnC,EAAqBmC,MAEvBhB,EAAUO,UAAU,cAAc,SAACC,GACjCH,QAAQC,IAAIE,GACZzB,EAAc,4BAA8ByB,MAE9CR,EAAUO,UAAU,uBAAuB,SAACC,GAC1CH,QAAQC,IAAIE,GACZvB,EAAuB,yBAA2BuB,MAEpDR,EAAUO,UAAU,iBAAiB,SAACC,GACpCH,QAAQC,IAAIE,GACZrB,EAAiB,4BAA8BqB,MAEjDR,EAAUO,UAAU,0BAA0B,SAACC,GAC7CH,QAAQC,IAAIE,GACZnB,EAA0B,yBAA2BmB,SAIvDR,EAAUiB,SACT,IAGD,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,kCACE,gCACE,+BACE,qBAAIC,QAAS,EAAb,cAAiB,qBAAKC,GAAG,QAAQR,IAAKlC,GAAsB,sJAAuJwC,UAAU,WAAWG,IAAI,SAA5O,OACA,qBAAIF,QAAS,EAAb,cAAiB,qBAAKC,GAAG,QAAQR,IAAKhC,GAAwC,sJAAuJsC,UAAU,WAAWG,IAAI,SAA9P,YAGJ,kCACE,+BACE,oBAAIF,QAAS,EAAb,2BACA,oBAAIA,QAAS,EAAb,2BAEF,+BACE,6BAAKjC,GAAgC,2EACrC,6BAAKE,GAAkD,yBACvD,6BAAKN,GAA0B,wEAC/B,6BAAKE,GAA4C,uCCtElDsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f067179.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { NstrumentaClient } from 'nstrumenta';\r\n\r\nfunction App() {\r\n  const [imageSrc, setImageSrc] = useState<string>()\r\n  const [processedImageSrc, setProcessedImageSrc] = useState<string>()\r\n  const [visionText, setVisionText] = useState<string>()\r\n  const [processedVisionText, setProcessedVisionText] = useState<string>()\r\n  const [tesseractText, setTesseractText] = useState<string>()\r\n  const [processedTesseractText, setProcessedTesseractText] = useState<string>()\r\n\r\n  useEffect(() => {\r\n\r\n    const wsUrlParam = new URLSearchParams(window.location.search).get(\"wsUrl\");\r\n\r\n    const wsUrl = wsUrlParam ? wsUrlParam : window.location.origin.replace('http', 'ws');\r\n\r\n    const nstClient = new NstrumentaClient({\r\n      apiKey: \"\",\r\n      projectId: \"\",\r\n      wsUrl,\r\n    });\r\n\r\n    nstClient.addListener(\"open\", () => {\r\n      console.log('nst client open')\r\n      nstClient.subscribe('preprocessing', (message) => {\r\n        setImageSrc('');\r\n        setProcessedImageSrc('');\r\n        const blob = new Blob([message], { type: 'image/png' });\r\n        const src = URL.createObjectURL(blob);\r\n        console.log(src);\r\n        setImageSrc(src);\r\n        setProcessedVisionText('');\r\n        setVisionText('');\r\n        setProcessedTesseractText('');\r\n        setTesseractText('');\r\n      })\r\n      nstClient.subscribe('postprocessing', (grayscale) => {\r\n        const blob = new Blob([grayscale], { type: 'image/png' });\r\n        const src1 = URL.createObjectURL(blob);\r\n        console.log(src1);\r\n        setProcessedImageSrc(src1);\r\n      })\r\n      nstClient.subscribe('visionText', (message) => {\r\n        console.log(message);\r\n        setVisionText('Without autograyscale => ' + message);\r\n      })\r\n      nstClient.subscribe('processedVisionText', (message) => {\r\n        console.log(message);\r\n        setProcessedVisionText('With autograyscale => ' + message);\r\n      })\r\n      nstClient.subscribe('tesseractText', (message) => {\r\n        console.log(message);\r\n        setTesseractText('Without autograyscale => ' + message);\r\n      })\r\n      nstClient.subscribe('processedTesseractText', (message) => {\r\n        console.log(message);\r\n        setProcessedTesseractText('With autograyscale => ' + message);\r\n      })\r\n    })\r\n\r\n      nstClient.init()\r\n    }, [])\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th colSpan={2}> <img id=\"image\" src={imageSrc ? imageSrc : 'https://nstrumenta.gallerycdn.vsassets.io/extensions/nstrumenta/nstrumenta-vscode/1.0.3/1633666110849/Microsoft.VisualStudio.Services.Icons.Default'} className=\"App-logo\" alt=\"logo\" /> </th>\r\n                <th colSpan={2}> <img id=\"image\" src={processedImageSrc ? processedImageSrc : 'https://nstrumenta.gallerycdn.vsassets.io/extensions/nstrumenta/nstrumenta-vscode/1.0.3/1633666110849/Microsoft.VisualStudio.Services.Icons.Default'} className=\"App-logo\" alt=\"logo\" /> </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <th colSpan={2}>Tesseract OCR</th>\r\n                <th colSpan={2}>Vision OCR</th>\r\n               </tr>\r\n              <tr>\r\n                <td>{tesseractText ? tesseractText : 'Please send an image from the Tesseract OCR app to see the text output'}</td>\r\n                <td>{processedTesseractText ? processedTesseractText : 'Waiting for an image'}</td>\r\n                <td>{visionText ? visionText : 'Please send an image from the Vision OCR app to see the text output'}</td>\r\n                <td>{processedVisionText ? processedVisionText : 'Waiting for an image'}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
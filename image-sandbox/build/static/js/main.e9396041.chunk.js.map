{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","imageSrc","setImageSrc","jimpSrc","setJimpSrc","text","setText","jimpText","setJimpText","useEffect","wsUrlParam","URLSearchParams","window","location","search","get","wsUrl","origin","replace","nstClient","NstrumentaClient","apiKey","projectId","addListener","console","log","subscribe","message","blob","Blob","type","src","URL","createObjectURL","grayscale","jimp","src1","init","className","id","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAoEeA,MAhEf,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEiBF,qBAFjB,mBAENG,EAFM,KAEGC,EAFH,OAGWJ,qBAHX,mBAGNK,EAHM,KAGAC,EAHA,OAImBN,qBAJnB,mBAINO,EAJM,KAIIC,EAJJ,KAgDb,OA1CAC,qBAAU,WAER,IAAMC,EAAa,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,SAE7DC,EAAQN,GAA0BE,OAAOC,SAASI,OAAOC,QAAQ,OAAQ,MAEzEC,EAAY,IAAIC,mBAAiB,CACrCC,OAAQ,GACRC,UAAW,GACXN,UAGFG,EAAUI,YAAY,QAAQ,WAC5BC,QAAQC,IAAI,mBACZN,EAAUO,UAAU,OAAO,SAACC,GAC1BzB,EAAY,IACZE,EAAW,IACX,IAAMwB,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAEG,KAAM,cACnCC,EAAMC,IAAIC,gBAAgBL,GAChCJ,QAAQC,IAAIM,GACZ7B,EAAY6B,GACZvB,EAAY,IACZF,EAAQ,OAEVa,EAAUO,UAAU,QAAQ,SAACQ,GAC3B,IAAMC,EAAO,IAAIN,KAAK,CAACK,GAAY,CAAEJ,KAAM,cACrCM,EAAOJ,IAAIC,gBAAgBE,GACjCX,QAAQC,IAAIW,GACZhC,EAAWgC,MAEbjB,EAAUO,UAAU,QAAQ,SAACC,GAC3BH,QAAQC,IAAIE,GACZrB,EAAQ,mBAAqBqB,MAE/BR,EAAUO,UAAU,YAAY,SAACC,GAC/BH,QAAQC,IAAIE,GACZnB,EAAY,gBAAkBmB,SAGlCR,EAAUkB,SACT,IAGD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,GAAG,QAAQR,IAAK9B,GAAsB,sJAAuJqC,UAAU,WAAWE,IAAI,SAC3N,qBAAKD,GAAG,QAAQR,IAAK5B,GAAoB,sJAAuJmC,UAAU,WAAWE,IAAI,SACzN,4BACGnC,IAEH,4BACGE,UC/CIkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9396041.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { NstrumentaClient } from 'nstrumenta';\r\n\r\nfunction App() {\r\n  const [imageSrc, setImageSrc] = useState<string>()\r\n  const [jimpSrc, setJimpSrc] = useState<string>()\r\n  const [text, setText] = useState<string>()\r\n  const [jimpText, setJimpText] = useState<string>()\r\n\r\n  useEffect(() => {\r\n\r\n    const wsUrlParam = new URLSearchParams(window.location.search).get(\"wsUrl\");\r\n\r\n    const wsUrl = wsUrlParam ? wsUrlParam : window.location.origin.replace('http', 'ws');\r\n\r\n    const nstClient = new NstrumentaClient({\r\n      apiKey: \"\",\r\n      projectId: \"\",\r\n      wsUrl,\r\n    });\r\n\r\n    nstClient.addListener(\"open\", () => {\r\n      console.log('nst client open')\r\n      nstClient.subscribe('ocr', (message) => {\r\n        setImageSrc('');\r\n        setJimpSrc('');\r\n        const blob = new Blob([message], { type: 'image/png' });\r\n        const src = URL.createObjectURL(blob);\r\n        console.log(src);\r\n        setImageSrc(src);\r\n        setJimpText('');\r\n        setText('');\r\n      })\r\n      nstClient.subscribe('jimp', (grayscale) => {\r\n        const jimp = new Blob([grayscale], { type: 'image/png' });\r\n        const src1 = URL.createObjectURL(jimp);\r\n        console.log(src1);\r\n        setJimpSrc(src1);\r\n      })\r\n      nstClient.subscribe('text', (message) => {\r\n        console.log(message);\r\n        setText('Without Jimp => ' + message);\r\n      })\r\n      nstClient.subscribe('jimpText', (message) => {\r\n        console.log(message);\r\n        setJimpText('With Jimp => ' + message);\r\n      })\r\n    })\r\n    nstClient.init()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img id=\"image\" src={imageSrc ? imageSrc : 'https://nstrumenta.gallerycdn.vsassets.io/extensions/nstrumenta/nstrumenta-vscode/1.0.3/1633666110849/Microsoft.VisualStudio.Services.Icons.Default'} className=\"App-logo\" alt=\"logo\" />\r\n        <img id=\"image\" src={jimpSrc ? jimpSrc : 'https://nstrumenta.gallerycdn.vsassets.io/extensions/nstrumenta/nstrumenta-vscode/1.0.3/1633666110849/Microsoft.VisualStudio.Services.Icons.Default'} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          {text}\r\n        </p>\r\n        <p>\r\n          {jimpText}\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}